import dotenv from "dotenv";
import TelegramBot, {
  InlineKeyboardMarkup,
  Message,
  CallbackQuery,
} from "node-telegram-bot-api";
import { checkSubscriptionStatus } from "./subscriptions";
import { checkout, subscriptionProducts } from "./config/yookassa";
import { createPayment } from "./payments";
import { SubscriptionType } from "./types/product";

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
const token = process.env.BOT_TOKEN;
if (!token) {
  throw new Error("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ");
}

export const bot = new TelegramBot(token, { polling: true });

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/^\/start(@\w+)?$/, (msg: Message) => {
  const chatId = msg.chat.id;
  const keyboard: InlineKeyboardMarkup = {
    inline_keyboard: [
      [
        { text: "üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data: "check_subscription" },
        { text: "üîó –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ", callback_data: "get_invite" },
      ],
      [
        { text: "1 –º–µ—Å—è—Ü - 100‚ÇΩ", callback_data: "sub_1_month" },
        { text: "3 –º–µ—Å—è—Ü–∞ - 250‚ÇΩ", callback_data: "sub_3_month" },
      ],
      [
        { text: "6 –º–µ—Å—è—Ü–µ–≤ - 450‚ÇΩ", callback_data: "sub_6_month" },
        { text: "12 –º–µ—Å—è—Ü–µ–≤ - 800‚ÇΩ", callback_data: "sub_12_month" },
      ],
    ],
  };

  const subscriptionInfo = `
üéØ <b>–ü—Ä–∏–≤–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞</b>

‚ú® <b>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –ø–æ–¥–ø–∏—Å–∫–∏:</b>
‚Ä¢ –î–æ—Å—Ç—É–ø –∫ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ–º—É –∫–æ–Ω—Ç–µ–Ω—Ç—É
‚Ä¢ –ß–∞—Ç —Å –∞–¥–º–∏–Ω–∞–º–∏
‚Ä¢ –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ –Ω–æ–≤—É—é –≤–∞–π—Ñ—É

üíé <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞—Ä–∏—Ñ:</b>
‚Ä¢ 1 –º–µ—Å—è—Ü - 100‚ÇΩ
‚Ä¢ 3 –º–µ—Å—è—Ü–∞ - 250‚ÇΩ (—ç–∫–æ–Ω–æ–º–∏—è 50‚ÇΩ)
‚Ä¢ 6 –º–µ—Å—è—Ü–µ–≤ - 450‚ÇΩ (—ç–∫–æ–Ω–æ–º–∏—è 150‚ÇΩ)
‚Ä¢ 12 –º–µ—Å—è—Ü–µ–≤ - 800‚ÇΩ (—ç–∫–æ–Ω–æ–º–∏—è 400‚ÇΩ)
  `;

  bot.sendMessage(chatId, subscriptionInfo, {
    parse_mode: "HTML",
    reply_markup: keyboard,
  });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
bot.on("callback_query", async (query: CallbackQuery) => {
  if (!query.message || !query.data) return;

  const chatId = query.message.chat.id;
  const data = query.data;
  const userId = query.from.id;

  switch (data) {
    case "check_subscription":
      const status = await checkSubscriptionStatus(userId);
      await bot.sendMessage(chatId, status);
      break;
    case "get_invite":
      await bot.sendMessage(
        chatId,
        "üîó –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –ø—Ä–∏–≤–∞—Ç–Ω—É—é –≥—Ä—É–ø–ø—É..."
      );
      break;
    case "sub_1_month":
    case "sub_3_month":
    case "sub_6_month":
    case "sub_12_month":
      const subscriptionType = data as SubscriptionType;
      const product = subscriptionProducts[subscriptionType];

      if (!product) {
        console.error(
          `–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Ç–∏–ø–∞ –ø–æ–¥–ø–∏—Å–∫–∏: ${subscriptionType}`
        );
        await bot.sendMessage(chatId, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –ø—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω");
        break;
      }

      if (product.price <= 0) {
        console.error(`–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞: ${product.name}`);
        await bot.sendMessage(
          chatId,
          "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–∞"
        );
        break;
      }

      if (product.duration <= 0) {
        console.error(
          `–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞: ${product.name}`
        );
        await bot.sendMessage(
          chatId,
          "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏"
        );
        break;
      }

      try {
        const payment = await checkout.createPayment({
          amount: {
            value: product.price.toString(),
            currency: "RUB",
          },
          confirmation: {
            type: "redirect",
            return_url: `https://t.me/${process.env.BOT_USERNAME}`,
          },
          metadata: {
            userId: userId.toString(),
            duration: product.duration.toString(),
            productName: product.name,
          },
          description: product.name,
        });

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await createPayment({
          userId,
          amount: product.price,
          productName: product.name,
        });

        const keyboard: InlineKeyboardMarkup = {
          inline_keyboard: [
            [
              {
                text: "üí≥ –û–ø–ª–∞—Ç–∏—Ç—å",
                url: payment.confirmation.confirmation_url,
              },
            ],
          ],
        };

        await bot.sendMessage(
          chatId,
          `üíé ${product.name} –∑–∞ ${
            product.price / 100
          }‚ÇΩ\n\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:`,
          { reply_markup: keyboard }
        );
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞:", error);
        await bot.sendMessage(
          chatId,
          "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        );
      }
      break;
  }

  await bot.answerCallbackQuery(query.id);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.on("polling_error", (error: Error) => {
  console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–æ—Å–µ:", error);
});

console.log("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...");
