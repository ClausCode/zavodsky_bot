import dotenv from "dotenv";
import TelegramBot, {
  InlineKeyboardMarkup,
  Message,
  CallbackQuery,
} from "node-telegram-bot-api";
import { checkSubscriptionStatus } from "./subscriptions";
import { checkout, subscriptionProducts } from "./config/yookassa";
import { createPayment } from "./payments";
import { SubscriptionType } from "./types/product";
import { privateGroupId } from "./config/groups";
import { getSubscription } from "./subscriptions";
import { PrismaClient } from "@prisma/client";

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
const token = process.env.BOT_TOKEN;
if (!token) {
  throw new Error("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ");
}

export const bot = new TelegramBot(token, { polling: true });

const prisma = new PrismaClient();

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/^\/start(@\w+)?$/, (msg: Message) => {
  const chatId = msg.chat.id;
  const keyboard: InlineKeyboardMarkup = {
    inline_keyboard: [
      [
        { text: "üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data: "check_subscription" },
        { text: "üîó –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ", callback_data: "get_invite" },
      ],
      [
        { text: "1 –º–µ—Å—è—Ü - 100‚ÇΩ", callback_data: "sub_1_month" },
        { text: "3 –º–µ—Å—è—Ü–∞ - 250‚ÇΩ", callback_data: "sub_3_month" },
      ],
      [
        { text: "6 –º–µ—Å—è—Ü–µ–≤ - 450‚ÇΩ", callback_data: "sub_6_month" },
        { text: "12 –º–µ—Å—è—Ü–µ–≤ - 800‚ÇΩ", callback_data: "sub_12_month" },
      ],
    ],
  };

  const subscriptionInfo = `
üéØ <b>–ü—Ä–∏–≤–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞</b>

‚ú® <b>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –ø–æ–¥–ø–∏—Å–∫–∏:</b>
‚Ä¢ –î–æ—Å—Ç—É–ø –∫ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ–º—É –∫–æ–Ω—Ç–µ–Ω—Ç—É
‚Ä¢ –ß–∞—Ç —Å –∞–¥–º–∏–Ω–∞–º–∏
‚Ä¢ –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ –Ω–æ–≤—É—é –≤–∞–π—Ñ—É

üíé <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞—Ä–∏—Ñ:</b>
‚Ä¢ 1 –º–µ—Å—è—Ü - 100‚ÇΩ
‚Ä¢ 3 –º–µ—Å—è—Ü–∞ - 250‚ÇΩ (—ç–∫–æ–Ω–æ–º–∏—è 50‚ÇΩ)
‚Ä¢ 6 –º–µ—Å—è—Ü–µ–≤ - 450‚ÇΩ (—ç–∫–æ–Ω–æ–º–∏—è 150‚ÇΩ)
‚Ä¢ 12 –º–µ—Å—è—Ü–µ–≤ - 800‚ÇΩ (—ç–∫–æ–Ω–æ–º–∏—è 400‚ÇΩ)
  `;

  bot.sendMessage(chatId, subscriptionInfo, {
    parse_mode: "HTML",
    reply_markup: keyboard,
  });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
bot.on("callback_query", async (query: CallbackQuery) => {
  if (!query.message || !query.data) return;

  const chatId = query.message.chat.id;
  const data = query.data;
  const userId = query.from.id;

  switch (data) {
    case "check_subscription":
      const status = await checkSubscriptionStatus(userId);
      await bot.sendMessage(chatId, status);
      break;
    case "start":
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
      const keyboard: InlineKeyboardMarkup = {
        inline_keyboard: [
          [
            {
              text: "üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
              callback_data: "check_subscription",
            },
            { text: "üîó –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ", callback_data: "get_invite" },
          ],
          [
            { text: "1 –º–µ—Å—è—Ü - 100‚ÇΩ", callback_data: "sub_1_month" },
            { text: "3 –º–µ—Å—è—Ü–∞ - 250‚ÇΩ", callback_data: "sub_3_month" },
          ],
          [
            { text: "6 –º–µ—Å—è—Ü–µ–≤ - 450‚ÇΩ", callback_data: "sub_6_month" },
            { text: "12 –º–µ—Å—è—Ü–µ–≤ - 800‚ÇΩ", callback_data: "sub_12_month" },
          ],
        ],
      };

      const subscriptionInfo = `
üéØ <b>–ü—Ä–∏–≤–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞</b>

‚ú® <b>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –ø–æ–¥–ø–∏—Å–∫–∏:</b>
‚Ä¢ –î–æ—Å—Ç—É–ø –∫ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ–º—É –∫–æ–Ω—Ç–µ–Ω—Ç—É
‚Ä¢ –ß–∞—Ç —Å –∞–¥–º–∏–Ω–∞–º–∏
‚Ä¢ –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ –Ω–æ–≤—É—é –≤–∞–π—Ñ—É

üíé <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞—Ä–∏—Ñ:</b>
‚Ä¢ 1 –º–µ—Å—è—Ü - 100‚ÇΩ
‚Ä¢ 3 –º–µ—Å—è—Ü–∞ - 250‚ÇΩ (—ç–∫–æ–Ω–æ–º–∏—è 50‚ÇΩ)
‚Ä¢ 6 –º–µ—Å—è—Ü–µ–≤ - 450‚ÇΩ (—ç–∫–æ–Ω–æ–º–∏—è 150‚ÇΩ)
‚Ä¢ 12 –º–µ—Å—è—Ü–µ–≤ - 800‚ÇΩ (—ç–∫–æ–Ω–æ–º–∏—è 400‚ÇΩ)
      `;

      await bot.sendMessage(chatId, subscriptionInfo, {
        parse_mode: "HTML",
        reply_markup: keyboard,
      });
      break;
    case "get_invite":
      const subscription = await getSubscription(userId);

      if (!subscription || subscription.endDate < new Date()) {
        await bot.sendMessage(
          chatId,
          "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ–π –≥—Ä—É–ø–ø–µ."
        );
        break;
      }

      if (!privateGroupId) {
        await bot.sendMessage(
          chatId,
          "‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: ID –ø—Ä–∏–≤–∞—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã –Ω–µ —É–∫–∞–∑–∞–Ω."
        );
        break;
      }

      try {
        // –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
        const inviteLink = await bot.createChatInviteLink(privateGroupId, {
          member_limit: 1,
          expire_date: Math.floor(Date.now() / 1000) + 3600, // –°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ 1 —á–∞—Å
        });

        await bot.sendMessage(
          chatId,
          `üîó –í–æ—Ç –≤–∞—à–∞ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –≤ –ø—Ä–∏–≤–∞—Ç–Ω—É—é –≥—Ä—É–ø–ø—É:\n\n${inviteLink.invite_link}\n\n‚ö†Ô∏è –°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ 1 —á–∞—Å –∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑.`
        );
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏:", error);
        await bot.sendMessage(
          chatId,
          "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        );
      }
      break;
    case "sub_1_month":
    case "sub_3_month":
    case "sub_6_month":
    case "sub_12_month":
      const subscriptionType = data as SubscriptionType;
      const product = subscriptionProducts[subscriptionType];

      if (!product) {
        console.error(
          `–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Ç–∏–ø–∞ –ø–æ–¥–ø–∏—Å–∫–∏: ${subscriptionType}`
        );
        await bot.sendMessage(chatId, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –ø—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω");
        break;
      }

      if (product.price <= 0) {
        console.error(`–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞: ${product.name}`);
        await bot.sendMessage(
          chatId,
          "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–∞"
        );
        break;
      }

      if (product.duration <= 0) {
        console.error(
          `–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞: ${product.name}`
        );
        await bot.sendMessage(
          chatId,
          "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏"
        );
        break;
      }

      try {
        const payment = await checkout.createPayment({
          amount: {
            value: product.price.toString(),
            currency: "RUB",
          },
          confirmation: {
            type: "redirect",
            return_url: `https://t.me/${process.env.BOT_USERNAME}`,
          },
          metadata: {
            userId: userId.toString(),
            duration: product.duration.toString(),
            productName: product.name,
          },
          description: product.name,
        });

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await createPayment({
          userId,
          amount: product.price,
          productName: product.name,
          yookassaId: payment.id,
        });

        const keyboard: InlineKeyboardMarkup = {
          inline_keyboard: [
            [
              {
                text: "üí≥ –û–ø–ª–∞—Ç–∏—Ç—å",
                url: payment.confirmation.confirmation_url,
              },
            ],
          ],
        };

        await bot.sendMessage(
          chatId,
          `üíé ${product.name} –∑–∞ ${Math.floor(
            product.price
          )}‚ÇΩ\n\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:`,
          { reply_markup: keyboard }
        );
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞:", error);
        await bot.sendMessage(
          chatId,
          "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        );
      }
      break;
  }

  await bot.answerCallbackQuery(query.id);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.on("polling_error", (error: Error) => {
  console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–æ—Å–µ:", error);
});

console.log("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...");

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å—Ç–µ–∫—à–µ–π –ø–æ–¥–ø–∏—Å–∫–æ–π
async function removeExpiredSubscriptions() {
  if (!privateGroupId) {
    console.error("ID –ø—Ä–∏–≤–∞—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã –Ω–µ —É–∫–∞–∑–∞–Ω");
    return;
  }

  try {
    const now = new Date();
    const expiredSubscriptions = await prisma.subscription.findMany({
      where: {
        endDate: {
          lte: now,
        },
      },
    });

    for (const subscription of expiredSubscriptions) {
      try {
        // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –≥—Ä—É–ø–ø—ã
        await bot.banChatMember(privateGroupId, subscription.userId);
        // –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –ø–æ–¥–ø–∏—Å–∫–µ
        await prisma.subscription.delete({
          where: { userId: subscription.userId },
        });
        console.log(
          `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${subscription.userId} —É–¥–∞–ª–µ–Ω –∏–∑ –≥—Ä—É–ø–ø—ã –∏–∑-–∑–∞ –∏—Å—Ç–µ–∫—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏`
        );
      } catch (error) {
        console.error(
          `–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${subscription.userId}:`,
          error
        );
      }
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–æ–∫:", error);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å–∫–æ—Ä–æ–º –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
async function sendSubscriptionExpiryNotifications() {
  try {
    const tomorrow = new Date();
    tomorrow.setDate(tomorrow.getDate() + 1);

    const expiringSubscriptions = await prisma.subscription.findMany({
      where: {
        endDate: {
          gte: new Date(),
          lte: tomorrow,
        },
      },
    });

    for (const subscription of expiringSubscriptions) {
      try {
        const keyboard: InlineKeyboardMarkup = {
          inline_keyboard: [
            [{ text: "üîÑ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data: "start" }],
          ],
        };

        await bot.sendMessage(
          subscription.userId,
          "‚ö†Ô∏è –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –∑–∞–≤—Ç—Ä–∞! –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É.",
          { reply_markup: keyboard }
        );
      } catch (error) {
        console.error(
          `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${subscription.userId}:`,
          error
        );
      }
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:", error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–æ–∫ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ –ø–æ–ª–Ω–æ—á—å
function scheduleDailyChecks() {
  const now = new Date();
  const midnight = new Date();
  midnight.setHours(24, 0, 0, 0);

  const timeUntilMidnight = midnight.getTime() - now.getTime();

  // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —á–µ—Ä–µ–∑ –≤—Ä–µ–º—è –¥–æ –ø–æ–ª—É–Ω–æ—á–∏
  setTimeout(() => {
    removeExpiredSubscriptions();
    sendSubscriptionExpiryNotifications();

    // –ó–∞—Ç–µ–º –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞
    setInterval(() => {
      removeExpiredSubscriptions();
      sendSubscriptionExpiryNotifications();
    }, 24 * 60 * 60 * 1000);
  }, timeUntilMidnight);
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞
scheduleDailyChecks();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
async function isAdmin(chatId: string, userId: number): Promise<boolean> {
  try {
    const chatMember = await bot.getChatMember(chatId, userId);
    return ["creator", "administrator"].includes(chatMember.status);
  } catch (error) {
    console.error(
      `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`,
      error
    );
    return false;
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
bot.on("new_chat_members", async (msg) => {
  if (
    !privateGroupId ||
    msg.chat.id.toString() !== privateGroupId ||
    !msg.new_chat_members
  ) {
    return; // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –∏–∑ –¥—Ä—É–≥–∏—Ö —á–∞—Ç–æ–≤ –∏–ª–∏ –µ—Å–ª–∏ –Ω–µ—Ç –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
  }

  for (const newMember of msg.new_chat_members) {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
      const isUserAdmin = await isAdmin(privateGroupId, newMember.id);
      if (isUserAdmin) {
        console.log(
          `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${newMember.id} —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∫–∏`
        );
        continue;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
      const subscription = await getSubscription(newMember.id);
      const now = new Date();

      if (!subscription || subscription.endDate < now) {
        // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –≥—Ä—É–ø–ø—ã
        await bot.banChatMember(privateGroupId, newMember.id);
        console.log(
          `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${newMember.id} —É–¥–∞–ª–µ–Ω –∏–∑ –≥—Ä—É–ø–ø—ã –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏`
        );

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try {
          await bot.sendMessage(
            newMember.id,
            "‚ùå –í—ã –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –ø—Ä–∏–≤–∞—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã, —Ç–∞–∫ –∫–∞–∫ —É –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.\n\n" +
              "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –≥—Ä—É–ø–ø–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É. –ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞."
          );
        } catch (error) {
          console.error(
            `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${newMember.id}:`,
            error
          );
        }
      }
    } catch (error) {
      console.error(
        `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ ${newMember.id}:`,
        error
      );
    }
  }
});
